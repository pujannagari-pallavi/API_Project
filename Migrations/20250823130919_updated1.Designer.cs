// <auto-generated />
using System;
using API_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250823130919_updated1")]
    partial class updated1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Project.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPersons")
                        .HasColumnType("int");

                    b.Property<int>("TourPackageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("TourPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfPersons = 2,
                            TourPackageId = 1,
                            UserId = 2
                        },
                        new
                        {
                            BookingId = 2,
                            BookingDate = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfPersons = 4,
                            TourPackageId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("API_Project.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 3000m,
                            BookingId = 1,
                            PaidOn = new DateTime(2025, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card",
                            Status = "Completed"
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 10000m,
                            BookingId = 2,
                            PaidOn = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "UPI",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("API_Project.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("API_Project.Models.TourPackage", b =>
                {
                    b.Property<int>("TourPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourPackageId"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TourPackageId");

                    b.ToTable("TourPackages");

                    b.HasData(
                        new
                        {
                            TourPackageId = 1,
                            Days = 3,
                            Location = "Goa",
                            PackName = "Beach Paradise",
                            Price = 1500m
                        },
                        new
                        {
                            TourPackageId = 2,
                            Days = 5,
                            Location = "Manali",
                            PackName = "Mountain Adventure",
                            Price = 2500m
                        },
                        new
                        {
                            TourPackageId = 3,
                            Days = 4,
                            Location = "Jaipur",
                            PackName = "Heritage Tour",
                            Price = 2000m
                        });
                });

            modelBuilder.Entity("API_Project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@test.com",
                            PasswordHash = "Admin@123",
                            RoleId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "john@test.com",
                            PasswordHash = "John@123",
                            RoleId = 2,
                            UserName = "john"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "pallavi@test.com",
                            PasswordHash = "pallavi@123",
                            RoleId = 2,
                            UserName = "pallavi"
                        });
                });

            modelBuilder.Entity("API_Project.Models.Booking", b =>
                {
                    b.HasOne("API_Project.Models.TourPackage", "TourPackage")
                        .WithMany("Bookings")
                        .HasForeignKey("TourPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Project.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Project.Models.Payment", b =>
                {
                    b.HasOne("API_Project.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("API_Project.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("API_Project.Models.User", b =>
                {
                    b.HasOne("API_Project.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API_Project.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("API_Project.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API_Project.Models.TourPackage", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("API_Project.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
